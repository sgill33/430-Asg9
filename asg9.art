;TYPEDEFS
define :ExprC [ 
    tag                 
    val
    arg1
    arg2
][ 
    init: [
        this\tag: this\tag
        this\val:  this\val
    ]
    compare: 'val
]

define :funcs [ 
    tag                 
    arg1
    arg2
    arg3
][ 
    init: [
        this\tag: this\tag
        this\arg1: this\arg1
        this\arg2: this\arg2
        this\arg3:  this\arg3
    ]
    compare: 'val
]

define :Binding [ 
    name                 
    val
][ 
    init: [
        this\name: this\name
        this\val:  this\val
    ]
] 

; Takes in two numbers and returns the result of adding them
addP: function[a b][
    a + b
]
; Takes in two numbers and returns the result of subtracting the second from the first
subP: function[a b][
    a - b
]
; Takes in two numbers and returns the result of multiplying them
multP: function[a b][
    a * b
]
; Takes in two numbers and returns the result of dividing the first by the second
divP: function[a b][
    if? b = 0 -> print "Error cannot divide by zero"
    else -> a / b
]
; Takes in two numbers and returns a boolean matching whether the first is less than or
; equal to the second
leqP: function [a b][
    a =< b
]
; Takes in two numbers and returns a boolean matching whether the first is equal
; to the second
eqP: function [a b][
    a = b
]

truPrim: to :Binding["true" true]
falsPrim: to :Binding ["false" false]
; addPrim: to :Binding["+" addP]
; subPrim: to :Binding["-" subP]
; multPrim: to :Binding["*" multP]
; divPrim: to :Binding["/" divP]
; leqPrim: to :Binding["<=" leqP]
; eqPrim: to :Binding["=" eqP]


dicttopenv: #[
    truPrim\name: truPrim\val
    falsPrim\name: falsPrim\val
]

topenv: [
    truPrim
    ; falsPrim
    ; addPrim
    ; subPrim
    ; multPrim
    ; divPrim
    ; leqPrim
    ; eqPrim
]

emptyenv: []

define :ifC [
    test
    then
    else
] [ 
    init: [
        this\test: this\test
        this\then: this\then
        this\else: this\else
    ]
]

define :lamC [
    params
    body
] [ 
    init: [
        this\params: this\params
        this\body: this\body
    ]
]

define :appC [
    fun
    args
] [ 
    init: [
        this\fun: this\fun
        this\args: this\args
    ]
]

;FUNCTION DEFS

; lookup: function[for env][
;     ensure -> is? :block env
;     ensure -> is? :string for
;     loop env 'x [
;         return x
;     ]
;     print "lookup error: name not found"
; ]
; print lookup "true" topenv

;Takes in a name (sym) and env and returns a value is the match value to name in the env
lookup: function [sym env][
    if empty? env -> print "lookup error: symbol not in env"
    else -> [
        firstBinding: env\0
        print firstBinding
        ;can't get \name of :word
        if? sym = firstBinding\name -> firstBinding\val
        else -> lookup sym (slice env 1 (size env))
    ]
]

; Interpreter for OAZO5 language, evaluates an ExprC and Env
; into a Value
interp: function[exp env][
    case [exp]
        when?[type exp = :ExprC] [if? or? exp\tag = "str" exp\tag = "num" -> return exp\val
        else [if? exp\tag = "id" -> return (lookup exp\val env)\val
            else [
                if? exp\tag = "if"[
                    if? interp exp\val env -> return interp arg1 env
                else -> return interp arg2 env]
                else [
                    if? exp\tag = "lam" -> return to :funcs "clo" exp\arg1 exp\arg2
                    else [

                    ]
                ]
            ]]]
        when?[is? :lamC exp] -> return exp\body
        when?[is? :appC exp] -> return exp\fun
        else -> [print "Error"]
]

num1: to :ExprC ["num" 1]
num2: to :ExprC ["num" 2]
str1: to :ExprC ["str" "hello"]
id1: to :ExprC ["id" "true"]
if1: to :ExprC ["if" "true" num1 num2]
lam1: to :ExprC ["lam" ["a" "b"] num1]

; print interp num1 topenv
; print interp str1 topenv
; print interp id1 topenv
; print interp if1 topenv
; print interp lam1 topenv
; print lookup "true" topenv

;TESTCASES

; if? interp num1 = 34 [print "Test 1 Passed: " interp num1]
; else [print "Test 1 Failed:" interp num1]

; if? interp str1 = "hello" [print "Test 2 Passed: " interp str1]
; else [print "Test 2 Failed:" interp num1]

; if? lookup "true" topenv = true [print "Test 3 Passed: " lookup num1]
; else [print "Test 3 Failed"]

; if? lookup "true" emptyenv [print "Test 4 Passed: " lookup num1]
; else [print "Test 4 Failed"]